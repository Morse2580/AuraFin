# .github/workflows/build-and-deploy.yml

name: Build and Deploy CashAppAgent

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]

env:
  AZURE_CONTAINER_REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r shared/requirements.txt
        pip install -r services/cle/requirements.txt
        pip install -r services/eic/requirements.txt  
        pip install -r services/cm/requirements.txt
        pip install pytest pytest-asyncio pytest-mock coverage

    - name: Set up test environment
      run: |
        export DATABASE_URL="postgresql://postgres:testpassword@localhost:5432/testdb"
        export REDIS_URL="redis://localhost:6379"
        export ENVIRONMENT="test"

    - name: Run database migrations
      run: |
        cd database
        python run_migrations.py
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb

    - name: Run unit tests
      run: |
        coverage run -m pytest tests/ -v --tb=short
        coverage report --show-missing
        coverage xml
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [cle, dim, eic, cm]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SERVICE_NAME=${{ matrix.service }}
          BUILD_DATE=${{ github.run_number }}
          GIT_SHA=${{ github.sha }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    strategy:
      matrix:
        service: [cle, dim, eic, cm]

    steps:
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy App Services
      run: |
        # Deploy CLE service
        az webapp config container set \
          --name "app-cashappagent-cle-staging" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
          --docker-custom-image-name "${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/cle:${{ github.sha }}"

        # Deploy EIC service  
        az webapp config container set \
          --name "app-cashappagent-eic-staging" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
          --docker-custom-image-name "${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/eic:${{ github.sha }}"

        # Deploy CM service
        az webapp config container set \
          --name "app-cashappagent-cm-staging" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
          --docker-custom-image-name "${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/cm:${{ github.sha }}"

    - name: Deploy DIM to AKS
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_STAGING }} \
          --name "aks-cashappagent-staging"

        # Update DIM deployment
        kubectl set image deployment/dim-deployment \
          dim=${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/dim:${{ github.sha }} \
          --namespace=cashappagent

        kubectl rollout status deployment/dim-deployment --namespace=cashappagent

    - name: Run smoke tests
      run: |
        python scripts/smoke_tests.py --environment staging
      env:
        STAGING_CLE_URL: ${{ secrets.STAGING_CLE_URL }}
        STAGING_EIC_URL: ${{ secrets.STAGING_EIC_URL }}
        STAGING_CM_URL: ${{ secrets.STAGING_CM_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Pre-deployment checks
      run: |
        # Check if services are healthy before deployment
        python scripts/pre_deployment_checks.py --environment production
      env:
        PROD_CLE_URL: ${{ secrets.PROD_CLE_URL }}
        PROD_EIC_URL: ${{ secrets.PROD_EIC_URL }}
        PROD_CM_URL: ${{ secrets.PROD_CM_URL }}

    - name: Deploy with Blue-Green strategy
      run: |
        # Deploy to staging slot first
        az webapp deployment slot swap \
          --name "app-cashappagent-cle-production" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --slot staging \
          --target-slot production

        az webapp deployment slot swap \
          --name "app-cashappagent-eic-production" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --slot staging \
          --target-slot production

        az webapp deployment slot swap \
          --name "app-cashappagent-cm-production" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --slot staging \
          --target-slot production

    - name: Deploy DIM to AKS Production
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --name "aks-cashappagent-production"

        # Rolling update with health checks
        kubectl set image deployment/dim-deployment \
          dim=${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/dim:${{ github.sha }} \
          --namespace=cashappagent

        kubectl rollout status deployment/dim-deployment --namespace=cashappagent --timeout=600s

    - name: Post-deployment verification
      run: |
        python scripts/post_deployment_tests.py --environment production
      env:
        PROD_CLE_URL: ${{ secrets.PROD_CLE_URL }}
        PROD_EIC_URL: ${{ secrets.PROD_EIC_URL }}
        PROD_CM_URL: ${{ secrets.PROD_CM_URL }}

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: |
          ðŸš€ CashAppAgent Production Deployment Successful
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Services: CLE, EIC, CM, DIM
          
          All health checks passed âœ…
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        message: |
          ðŸš¨ CashAppAgent Production Deployment Failed
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          
          Please check GitHub Actions for details
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback if needed
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Rollback App Services
      run: |
        # Get previous deployment
        PREVIOUS_SHA=$(git log --format="%H" -n 2 | tail -1)
        
        # Rollback services
        az webapp config container set \
          --name "app-cashappagent-cle-production" \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --docker-custom-image-name "${{ secrets.ACR_LOGIN_SERVER }}/cashappagent/cle:${PREVIOUS_SHA}"

    - name: Rollback AKS deployment
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_PRODUCTION }} \
          --name "aks-cashappagent-production"

        kubectl rollout undo deployment/dim-deployment --namespace=cashappagent

# .github/workflows/infrastructure.yml

name: Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Run tflint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest

    - name: Run TFLint
      run: |
        cd terraform
        tflint --init
        tflint

    - name: Security scan with tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform

  terraform-plan-staging:
    name: Plan Staging Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=cashappagent-staging.tfstate"

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var-file="environments/staging.tfvars" \
          -out=tfplan-staging
      env:
        TF_VAR_environment: staging

    - name: Save plan artifact
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-staging
        path: terraform/tfplan-staging

  terraform-plan-production:
    name: Plan Production Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=cashappagent-production.tfstate"

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var-file="environments/production.tfvars" \
          -out=tfplan-production
      env:
        TF_VAR_environment: production

    - name: Save plan artifact
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-production
        path: terraform/tfplan-production

  terraform-apply-staging:
    name: Apply Staging Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging-infrastructure

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download plan artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan-staging
        path: terraform

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=cashappagent-staging.tfstate"

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply tfplan-staging

    - name: Output infrastructure info
      run: |
        cd terraform
        terraform output -json > ../infrastructure-outputs-staging.json

    - name: Upload infrastructure outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs-staging
        path: infrastructure-outputs-staging.json

  terraform-apply-production:
    name: Apply Production Infrastructure  
    runs-on: ubuntu-latest
    needs: terraform-plan-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production-infrastructure

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download plan artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan-production
        path: terraform

    - name: Terraform Init
      run: |
        cd terraform
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=cashappagent-production.tfstate"

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply tfplan-production

    - name: Output infrastructure info
      run: |
        cd terraform
        terraform output -json > ../infrastructure-outputs-production.json

    - name: Upload infrastructure outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs-production
        path: infrastructure-outputs-production.json
