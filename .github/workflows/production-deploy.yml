name: CashUp Agent - Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build and Test ML Services
  build-and-test:
    name: Build & Test ML Services
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        service: [dim, eic, cm, cle, orchestrator]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test service startup
        run: |
          docker run --rm -d --name test-${{ matrix.service }} \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e REDIS_URL=redis://localhost:6379 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          
          # Wait for service to start
          sleep 30
          
          # Check if service is healthy
          docker logs test-${{ matrix.service }}
          
          # Cleanup
          docker stop test-${{ matrix.service }}

  # Load Testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: cashup_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Start CashUp Agent stack
        run: |
          docker compose -f docker-compose.e2e.yml up -d
          sleep 60  # Wait for all services to start
      
      - name: Install load testing dependencies
        run: |
          pip install -r load-testing/requirements.txt
      
      - name: Run load tests
        run: |
          cd load-testing
          locust -f locustfile.py --headless \
            --users 50 --spawn-rate 5 --run-time 300s \
            --host http://localhost:8002 \
            --html load-test-report.html
      
      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-testing/load-test-report.html

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, load-testing]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to EKS
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --name cashup-production-cluster
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/production/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/cashup-dim -n cashup-production
          kubectl rollout status deployment/cashup-eic -n cashup-production
          kubectl rollout status deployment/cashup-cm -n cashup-production
      
      - name: Verify deployment health
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=cashup-dim -n cashup-production --timeout=300s
          kubectl wait --for=condition=ready pod -l app=cashup-eic -n cashup-production --timeout=300s
          kubectl wait --for=condition=ready pod -l app=cashup-cm -n cashup-production --timeout=300s
          
          # Run health checks
          kubectl exec -n cashup-production deployment/cashup-dim -- curl -f http://localhost:8002/health
          kubectl exec -n cashup-production deployment/cashup-eic -- curl -f http://localhost:8003/health
          kubectl exec -n cashup-production deployment/cashup-cm -- curl -f http://localhost:8004/health
      
      - name: Run post-deployment tests
        run: |
          # Run smoke tests against production
          python scripts/production-smoke-tests.py
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: deploy-production
    environment: production
    
    steps:
      - name: Rollback to previous version
        run: |
          aws eks update-kubeconfig --name cashup-production-cluster
          kubectl rollout undo deployment/cashup-dim -n cashup-production
          kubectl rollout undo deployment/cashup-eic -n cashup-production
          kubectl rollout undo deployment/cashup-cm -n cashup-production