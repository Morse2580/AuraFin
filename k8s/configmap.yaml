# k8s/namespace.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: cashappagent
  labels:
    name: cashappagent
    environment: production
    project: cashappagent

# k8s/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: dim-config
  namespace: cashappagent
data:
  SERVICE_NAME: "dim"
  DEBUG: "false"
  HOST: "0.0.0.0"
  PORT: "8002"
  WORKERS: "1"
  MODEL_CACHE_DIR: "/app/models"
  LAYOUTLM_MODEL_PATH: "microsoft/layoutlmv3-base"
  LLAMA_MODEL_PATH: "meta-llama/Meta-Llama-3-8B-Instruct"
  MAX_DOCUMENTS_PER_REQUEST: "10"
  MAX_BATCH_SIZE: "100"
  PROCESSING_TIMEOUT_SECONDS: "300"
  TORCH_COMPILE: "false"
  ENABLE_ATTENTION_SLICING: "true"
  ENABLE_CPU_OFFLOAD: "true"
  METRICS_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30"

---
# k8s/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: dim-secrets
  namespace: cashappagent
type: Opaque
data:
  # These should be populated by your deployment pipeline from Azure Key Vault
  AZURE_STORAGE_CONNECTION_STRING: "" # Base64 encoded
  DATABASE_URL: "" # Base64 encoded
  APPLICATIONINSIGHTS_CONNECTION_STRING: "" # Base64 encoded

---
# k8s/gpu-device-plugin.yaml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      - key: workload-type
        operator: Equal
        value: gpu
        effect: NoSchedule
      priorityClassName: system-node-critical
      containers:
      - image: mcr.microsoft.com/oss/nvidia/k8s-device-plugin:v0.14.1
        name: nvidia-device-plugin-ctr
        args: ["--fail-on-init-error=false"]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: device-plugin
            mountPath: /var/lib/kubelet/device-plugins
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
      nodeSelector:
        accelerator: nvidia

---
# k8s/pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dim-models-pvc
  namespace: cashappagent
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: managed-csi-premium

---
# k8s/deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: dim-deployment
  namespace: cashappagent
  labels:
    app: dim
    version: v1
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: dim
  template:
    metadata:
      labels:
        app: dim
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      # Use node selector to target GPU nodes
      nodeSelector:
        workload-type: gpu
        
      # Tolerate GPU node taints
      tolerations:
      - key: workload-type
        operator: Equal
        value: gpu
        effect: NoSchedule
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
        
      # Service account for Azure integration
      serviceAccountName: dim-service-account
      
      # Security context
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        
      # Init container to prepare models
      initContainers:
      - name: model-downloader
        image: python:3.11-slim
        command: ["/bin/bash"]
        args:
          - -c
          - |
            pip install transformers torch --index-url https://download.pytorch.org/whl/cpu
            python -c "
            from transformers import LayoutLMv3Processor, LayoutLMv3ForTokenClassification, AutoTokenizer, AutoModelForCausalLM
            import os
            
            cache_dir = '/models'
            os.makedirs(cache_dir, exist_ok=True)
            
            print('Downloading LayoutLMv3 model...')
            LayoutLMv3Processor.from_pretrained('microsoft/layoutlmv3-base', cache_dir=cache_dir)
            LayoutLMv3ForTokenClassification.from_pretrained('microsoft/layoutlmv3-base', cache_dir=cache_dir)
            
            print('Model download completed')
            "
        volumeMounts:
        - name: models-volume
          mountPath: /models
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
      
      containers:
      - name: dim
        image: cashappagent/dim:latest
        imagePullPolicy: Always
        
        ports:
        - containerPort: 8002
          name: http
          protocol: TCP
        
        # Environment variables from ConfigMap and Secrets
        envFrom:
        - configMapRef:
            name: dim-config
        - secretRef:
            name: dim-secrets
            
        # Additional environment variables
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: workload-identity-credentials
              key: client_id
              
        # Resource requests and limits
        resources:
          requests:
            memory: "8Gi"
            cpu: "2"
            nvidia.com/gpu: 1
          limits:
            memory: "16Gi"
            cpu: "4"
            nvidia.com/gpu: 1
            
        # Volume mounts
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: tmp-volume
          mountPath: /tmp
          
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /health/deep
            port: http
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
          
        # Startup probe for slow model loading
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 30  # Allow up to 5 minutes for startup
          
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Models need write access
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
              
      # Volumes
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: dim-models-pvc
      - name: tmp-volume
        emptyDir:
          sizeLimit: 10Gi
          
      # Restart policy
      restartPolicy: Always
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Termination grace period
      terminationGracePeriodSeconds: 60

---
# k8s/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: dim-service
  namespace: cashappagent
  labels:
    app: dim
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  selector:
    app: dim
  ports:
  - name: http
    port: 80
    targetPort: 8002
    protocol: TCP
  sessionAffinity: None

---
# k8s/hpa.yaml

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dim-hpa
  namespace: cashappagent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dim-deployment
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# k8s/service-account.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: dim-service-account
  namespace: cashappagent
  annotations:
    azure.workload.identity/client-id: "YOUR_MANAGED_IDENTITY_CLIENT_ID"
  labels:
    azure.workload.identity/use: "true"

---
# k8s/network-policy.yaml

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dim-network-policy
  namespace: cashappagent
spec:
  podSelector:
    matchLabels:
      app: dim
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8002
  egress:
  - {} # Allow all egress (for model downloads, API calls, etc.)

---
# k8s/pod-disruption-budget.yaml

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dim-pdb
  namespace: cashappagent
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: dim

---
# k8s/ingress.yaml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dim-ingress
  namespace: cashappagent
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/client-max-body-size: "50m"
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "10"
    nginx.ingress.kubernetes.io/rate-limit-connections: "5"
    # IP whitelisting
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - dim-api.company.internal
    secretName: dim-tls-secret
  rules:
  - host: dim-api.company.internal
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dim-service
            port:
              number: 80

---
# k8s/monitoring.yaml

apiVersion: v1
kind: Service
metadata:
  name: dim-metrics
  namespace: cashappagent
  labels:
    app: dim
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8002"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: dim
  ports:
  - name: metrics
    port: 8002
    targetPort: 8002
    protocol: TCP
  clusterIP: None

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: dim-service-monitor
  namespace: cashappagent
  labels:
    app: dim
spec:
  selector:
    matchLabels:
      app: dim
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# k8s/grafana-dashboard-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: dim-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  dim-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "CashAppAgent DIM Service",
        "tags": ["cashappagent", "dim", "ml"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(dim_parse_requests_total[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Processing Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(dim_processing_duration_ms_bucket[5m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "GPU Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "nvidia_gpu_utilization_percentage",
                "legendFormat": "GPU {{device}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{pod=~\"dim-deployment-.*\"}",
                "legendFormat": "Memory Usage"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }
